{"version":3,"sources":["../../testabulous-runner/node_modules/.pnpm/tsup@8.0.1_postcss@8.4.33_typescript@5.3.3/node_modules/tsup/assets/esm_shims.js","../../testabulous-runner/src/index.ts","../../testabulous-runner/src/runner/index.ts","../../testabulous-runner/src/lib/db.ts","../../testabulous-runner/src/lib/schema.ts","../../testabulous-runner/src/cache/index.ts","../../testabulous-runner/src/lib/utils.ts","../../testabulous-runner/src/config.ts","../../testabulous-runner/src/runner/calls.ts","../../testabulous-runner/src/runner/utils.ts","../../testabulous-runner/src/runner/browser.ts","../../testabulous-runner/src/runner/log.ts","../../testabulous-runner/src/ui/index.ts","../../testabulous-runner/src/init/index.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","#!/usr/bin/env node\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport chalk from \"chalk\"\nimport figlet from \"figlet\"\nimport { Command } from \"commander\"\nimport { TestRunner } from \"./runner\"\nimport { WebUI } from \"./ui\"\nimport { Cache } from \"./cache\"\nimport { RuntimeConfig, BuildConfig as buildConfig } from \"./config\"\nimport { migrateDatabase } from \"./lib/db\"\nimport { InitTestabulous } from \"./init\"\n\nconsole.log(chalk.greenBright(figlet.textSync(\"Testabulous\")))\n\nconst program = new Command()\nprogram.exitOverride((err) => {\n  console.log(chalk.redBright(`🤕 ${err}`))\n  process.exit(-1)\n})\n\nprogram\n  .version(\"1.0.0\")\n  .description(\"Testabulous E2E Testing Framework\")\n  .option(\"-c, --config-file <value>\", \"Local config file [./testabulous.config.json]\")\n  .option(\"-e, --env-file <value>\", \"File to load environment variables from\")\n  .option(\"-p, --project-id <value>\", \"Project ID\")\n  .option(\"-k, --api-key <value>\", \"API key\")\n  .option(\"-r, --root-dir <value>\", \"Test root directory [./testabulous]\")\n\nprogram\n  .command(\"init\")\n  .description(\"Initialise testabulous project\")\n  .action(async () => {\n    try {\n      const cfg = await buildConfig(program.opts(), {})\n      await migrateDatabase(cfg.cacheDir)\n\n      await InitTestabulous(cfg)\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 Initialisation failed: ${e}`))\n      process.exit(-1)\n    }\n  })\n\nprogram\n  .command(\"cache\")\n  .option(\"-f, --file <value>\", \"Specific test file to cache\")\n  .option(\"-F, --force\", \"Force re-cache of all test files\")\n  .description(\"Parse and cache test files\")\n  .action(async (localOpts: any) => {\n    try {\n      let cfg: RuntimeConfig\n      try {\n        cfg = await buildConfig(program.opts(), localOpts)\n        await migrateDatabase(cfg.cacheDir)\n      } catch (e) {\n        console.log(chalk.redBright(`🤕 Initialisation failed: ${e}`))\n        process.exit(-1)\n      }\n\n      await Cache(cfg)\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      process.exit(-1)\n    }\n  })\n\nprogram\n  .command(\"test\")\n  .option(\"-f, --file <value>\", \"Specific test file to execute\")\n  .option(\"-t, --test <value>\", \"Specific test to execute\")\n  .description(\"Start testabulous test runner\")\n  .action(async (localOpts: any) => {\n    let cfg: RuntimeConfig\n    try {\n      cfg = await buildConfig(program.opts(), localOpts)\n      await migrateDatabase(cfg.cacheDir)\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 Initialisation failed: ${e}`))\n      process.exit(-1)\n    }\n\n    TestRunner(\"local\", cfg)\n      .then((results) => {\n        switch (results.result) {\n          case \"pass\":\n          case \"skip\":\n            process.exit(0)\n            break\n          case \"warn\":\n            process.exit(1)\n            break\n          case \"fail\":\n            process.exit(2)\n            break\n          case \"error\":\n            process.exit(3)\n            break\n        }\n      })\n      .catch(() => {\n        process.exit(3)\n      })\n  })\n\nprogram\n  .command(\"remote\")\n  .description(\"Start testabulous test runner for remote run\")\n  .action(async (localOpts: any) => {\n    let cfg: RuntimeConfig\n    try {\n      cfg = await buildConfig(program.opts(), localOpts)\n      await migrateDatabase(cfg.cacheDir)\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 Initialisation failed: ${e}`))\n      process.exit(-1)\n    }\n\n    TestRunner(\"remote\", cfg)\n      .then((results) => {\n        switch (results.result) {\n          case \"pass\":\n          case \"skip\":\n            process.exit(0)\n            break\n          case \"warn\":\n            process.exit(1)\n            break\n          case \"fail\":\n            process.exit(2)\n            break\n          case \"error\":\n            process.exit(3)\n            break\n        }\n      })\n      .catch(() => {\n        process.exit(3)\n      })\n  })\n\nprogram\n  .command(\"open\")\n  .description(\"Open testabulous UI\")\n  .option(\"-P, --port <value>\", \"Port to run Testabulous UI [4001]\")\n  .action(async (localOpts: any) => {\n    let cfg: RuntimeConfig\n    try {\n      cfg = await buildConfig(program.opts(), localOpts)\n      await migrateDatabase(cfg.cacheDir)\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 Initialisation failed: ${e}`))\n      process.exit(-1)\n    }\n\n    WebUI(cfg)\n      .then(() => {\n        console.log(chalk.greenBright(`Lingobt UI terminated`))\n      })\n      .catch((e) => {\n        console.log(chalk.redBright(`🤕 ${e}`))\n        process.exit(-1)\n      })\n  })\n\ntry {\n  program.parse(process.argv)\n} catch (e) {\n  console.log(chalk.redBright(`🤕 ${e}`))\n  process.exit(-1)\n}\n","import fs from \"fs/promises\"\nimport chalk, { ChalkInstance } from \"chalk\"\nimport { createHash } from \"node:crypto\"\n\nimport { RuntimeConfig } from \"../config\"\nimport { closeDatabase, DbConn, getDatabase, findScriptDataByHash, findTestSpecByScriptDataId } from \"../lib/db\"\nimport { cacheFiles } from \"../cache\"\nimport { getTargetFiles } from \"../lib/utils\"\nimport { Call, Definition, TestScript, TestSpec, TestDefType } from \"../lib/types\"\nimport { getTestRunnerCall } from \"./calls\"\nimport { closeBrowser, createBrowser } from \"./browser\"\nimport { logging } from \"selenium-webdriver\"\nimport { TestContext, TestDefinitionRun, TestRun, TestRunType, TestSpecRun, TestStepRun } from \"./types\"\nimport { formatNumber, aggregateOutcome, outcomeEnd, outcomeStart, uploadTestResult } from \"./utils\"\nimport { format } from \"date-fns\"\nimport { renderTestResult } from \"./log\"\nimport axios from \"axios\"\n\nexport async function TestRunner(runType: TestRunType, cfg: RuntimeConfig) {\n  const run: TestRun = { ...outcomeStart(), projectId: cfg.projectId, runType: runType, specs: [] }\n  console.log(chalk.blueBright(`🚀 Starting test run (id:${run.executionId})`))\n\n  try {\n    if (cfg.screenshots) {\n      fs.mkdir(`${cfg.screenshotsDir}/${run.executionId}`, { recursive: true })\n    }\n\n    switch (runType) {\n      case \"local\":\n        await runLocal(run, cfg)\n        break\n      case \"remote\":\n        await runRemote(run, cfg)\n        break\n    }\n\n    const res = aggregateOutcome(run, run.specs)\n\n    let fn: ChalkInstance | null = null\n    switch (res.result) {\n      case \"pass\":\n      case \"skip\":\n        fn = chalk.greenBright\n        break\n      case \"warn\":\n        fn = chalk.yellowBright\n        break\n      case \"fail\":\n      case \"error\":\n        fn = chalk.redBright\n        break\n    }\n\n    await fs.writeFile(\n      `${cfg.logsDir}/${format(run.startDate, \"yyyyMMddHHmmss\")}_${run.executionId}.json`,\n      JSON.stringify(run, null, 2),\n    )\n\n    await fs.writeFile(\n      `${cfg.logsDir}/${format(run.startDate, \"yyyyMMddHHmmss\")}_${run.executionId}.html`,\n      renderTestResult(run),\n    )\n\n    await uploadTestResult(cfg, run)\n\n    console.log(fn(`💥 Test run complete: ${res.result}`))\n    console.log(fn(`  ${formatNumber(res.passCount)} passed`))\n    console.log(fn(`  ${formatNumber(res.failCount)} failed`))\n    console.log(fn(`  ${formatNumber(res.skipCount)} skipped`))\n    console.log(fn(`  ${formatNumber(res.warnCount)} warnings`))\n    console.log(fn(`  ${formatNumber(res.errorCount)} errors`))\n\n    return res\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 Exception running tests: ${e}`))\n    throw e\n  } finally {\n    closeDatabase()\n  }\n}\n\nasync function runLocal(run: TestRun, cfg: RuntimeConfig) {\n  const db = getDatabase(cfg.cacheDir)\n\n  const testFiles = await getTargetFiles(cfg)\n\n  await cacheFiles(testFiles, cfg, db)\n\n  const specs: TestSpec[] = []\n  for (const f of testFiles) {\n    const spec = await findTestSpec(f, db)\n    specs.push(spec)\n    for (const d of spec.definitions) {\n      if (d.type === TestDefType.Procedure) {\n        cfg.procedures.push(d)\n      }\n    }\n  }\n\n  for (const spec of specs) {\n    let countOfTests = 0\n    for (const d of spec.definitions) {\n      if (d.type === TestDefType.Test) {\n        countOfTests++\n      }\n    }\n\n    if (countOfTests === 0) {\n      continue\n    }\n\n    const browser = await createBrowser(cfg)\n\n    const ctx: TestContext = {\n      testRunId: run.executionId,\n      config: cfg,\n      browser: browser,\n      metadata: {},\n      timeout: 10000,\n    }\n\n    const specResult = await runSpecTests(spec, ctx)\n    run.specs.push(specResult)\n  }\n}\n\nasync function runRemote(run: TestRun, cfg: RuntimeConfig) {\n  try {\n    if (cfg.taskId) {\n      run.taskId = cfg.taskId\n    }\n\n    const { status, data: scripts } = await axios.get<TestScript[]>(\n      `${cfg.apiBaseURL}/projects/${cfg.projectId}/scripts`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${cfg.apiKey}`,\n        },\n      },\n    )\n    if (status !== 200) {\n      throw `Server returned ${status}`\n    }\n\n    for (const s of scripts) {\n      if (cfg.testScriptDataId && s.scriptData.id !== cfg.testScriptDataId) {\n        continue\n      }\n      const specResult = await runRemoteScript(s, cfg, run.executionId)\n      run.specs.push(specResult)\n    }\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 Running scripts for project ${cfg.projectId}: ${e}`))\n    throw e\n  }\n}\n\nasync function findTestSpec(file: string, db: DbConn) {\n  console.log(chalk.whiteBright(`Loading file: ${file}`))\n\n  const data = await fs.readFile(file, { encoding: \"utf-8\" })\n\n  const hash = createHash(\"sha256\").update(data).digest(\"base64\")\n  const existingScript = await findScriptDataByHash(hash, db)\n  if (!existingScript) {\n    throw \"Script not found\"\n  }\n\n  const spec = await findTestSpecByScriptDataId(existingScript.id, db)\n  if (!spec) {\n    throw \"Test spec not found\"\n  }\n\n  if (spec.definitions.length === 0) {\n    throw \"No tests found\"\n  }\n\n  return spec\n}\n\nexport async function runSpecTests(spec: TestSpec, ctx: TestContext) {\n  if (spec.name) {\n    console.log(chalk.whiteBright(spec.name))\n    console.log(chalk.whiteBright(\"=\".repeat(spec.name.length)))\n  }\n\n  try {\n    const specResult: TestSpecRun = { ...outcomeStart(spec.name), specId: spec.id, tests: [] }\n\n    for (const d of spec.definitions) {\n      if (d.type !== TestDefType.Test) {\n        continue\n      }\n      if (!ctx.config.test || d.name === ctx.config.test) {\n        const testResult = await runTest(d, ctx)\n        specResult.tests.push(testResult)\n      }\n    }\n\n    return aggregateOutcome(specResult, specResult.tests)\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 Processing ${spec.name}: ${e}`))\n    throw e\n  } finally {\n    try {\n      console.info(chalk.blueBright(`👍 Closing browser`))\n      await closeBrowser()\n    } catch (e) {\n      console.warn(chalk.yellow(`🤕 Closing browser: ${e}`))\n    }\n  }\n}\n\nasync function runRemoteScript(testScript: TestScript, cfg: RuntimeConfig, testRunId: string) {\n  const spec = testScript.scriptData.spec\n  if (!spec) {\n    throw \"No spec found\"\n  }\n\n  console.log(chalk.blueBright(`Running ${spec.name} (${spec.id})`))\n\n  const browser = await createBrowser(cfg)\n  const ctx: TestContext = {\n    testRunId: testRunId,\n    config: cfg,\n    browser: browser,\n    metadata: {},\n    timeout: 10000,\n  }\n\n  try {\n    const specResult: TestSpecRun = { ...outcomeStart(spec.name), specId: spec.id, tests: [] }\n\n    for (const d of spec.definitions) {\n      if (!cfg.test || d.name === cfg.test) {\n        const testResult = await runTest(d, ctx)\n        specResult.tests.push(testResult)\n      }\n    }\n\n    return aggregateOutcome(specResult, specResult.tests)\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 Processing ${spec.name} (${spec.id}): ${e}`))\n    throw e\n  } finally {\n    try {\n      console.info(chalk.blueBright(`👍 Closing browser`))\n      await closeBrowser()\n    } catch (e) {\n      console.warn(chalk.yellow(`🤕 Closing browser: ${e}`))\n    }\n  }\n}\n\nexport async function runTest(def: Definition, ctx: TestContext) {\n  console.log(chalk.whiteBright(`  ${def.name}`))\n  console.log(chalk.whiteBright(`  ${\"=\".repeat(def.name.length)}`))\n\n  const testResult: TestDefinitionRun = { ...outcomeStart(def.name), definitionId: def.id, steps: [] }\n\n  const calls: Map<string, Call[]> = new Map()\n  for (const c of def.calls) {\n    if (!calls.has(c.testSpecClauseId)) {\n      calls.set(c.testSpecClauseId, [])\n    }\n    calls.get(c.testSpecClauseId)?.push(c)\n  }\n\n  for (const step of def.steps) {\n    console.log(chalk.whiteBright(`  * ${step.clause} (L${step.line + 1})`))\n    if (!calls.has(step.id)) {\n      console.log(chalk.redBright(`    (✗) No function calls for ${step.clause}`))\n      const res: TestStepRun = { ...outcomeStart(step.clause), stepId: step.id }\n      testResult.steps.push(outcomeEnd(res, \"error\", \"no matching calls found for step\"))\n      continue\n    }\n\n    const callList = calls.get(step.id)\n    if (!callList || callList.length == 0) {\n      const res: TestStepRun = { ...outcomeStart(step.clause), stepId: step.id }\n      testResult.steps.push(outcomeEnd(res, \"error\", \"no function calls found for step\"))\n      continue\n    }\n\n    ctx.currentStep = step\n    for (const c of callList) {\n      const fn = getTestRunnerCall(c.call)\n\n      try {\n        const params = JSON.parse(c.params)\n\n        const result = await fn(ctx, params)\n        testResult.steps.push(result)\n        if (ctx.config.screenshots) {\n          result.screenshot = `${ctx.config.screenshotsDir}/${ctx.testRunId}/${step.id}_${result.executionId}.png`\n          const data = await ctx.browser.takeScreenshot()\n          await fs.writeFile(result.screenshot, data, \"base64\")\n        }\n\n        if (result.result === \"pass\") {\n          console.log(chalk.greenBright(`    (✓) Passed`))\n        } else if (result.result === \"warn\") {\n          console.log(chalk.yellowBright(`    (⚠) Warning: ${result.message}`))\n        } else {\n          console.log(chalk.redBright(`    (✗) Failed: ${result.message}`))\n        }\n      } catch (e) {\n        console.log(chalk.redBright(`    (✗) Error: ${e}`))\n        const browserLogs = await ctx.browser.manage().logs().get(logging.Type.BROWSER)\n        for (const log of browserLogs) {\n          console.log(chalk.yellowBright(`    (✗) ${log.message}`))\n        }\n      }\n    }\n  }\n\n  return aggregateOutcome(testResult, testResult.steps)\n}\n","import { eq, and } from \"drizzle-orm\"\nimport { drizzle } from \"drizzle-orm/better-sqlite3\"\nimport { migrate } from \"drizzle-orm/better-sqlite3/migrator\"\nimport Database from \"better-sqlite3\"\nimport path from \"path\"\nimport * as schema from \"./schema\"\nimport chalk from \"chalk\"\n\nimport {\n  callsTable,\n  clausesTable,\n  definitionsTable,\n  scriptDataTable,\n  scriptsTable,\n  testSpecsTable,\n} from \"../lib/schema\"\n\nimport { Clause, ClauseType, Definition, TestScript, TestScriptData, TestSpec } from \"./types\"\n\nexport type DbConn = ReturnType<typeof drizzle>\n\nlet sqlite: ReturnType<typeof Database> | null = null\nlet drizzleInstance: DbConn | null = null\n\nexport const getDatabase = (dbPath: string) => {\n  if (drizzleInstance === null) {\n    if (sqlite === null) {\n      sqlite = new Database(path.join(dbPath, \"testabulous.db\"))\n    }\n    drizzleInstance = drizzle(sqlite, { schema: schema, logger: false })\n  }\n  return drizzleInstance\n}\n\nexport const closeDatabase = () => {\n  console.log(chalk.yellow(`👍 Closing database`))\n  if (drizzleInstance != null) {\n    drizzleInstance = null\n  }\n  if (sqlite != null) {\n    sqlite.close()\n    sqlite = null\n  }\n}\n\nexport const migrateDatabase = async (dbPath: string) => {\n  const db = getDatabase(dbPath)\n  try {\n    const dir = path.join(__dirname, \"..\", \"drizzle\")\n    console.log(chalk.greenBright(`Migrating databases from: ${dir}`))\n    await migrate(db, { migrationsFolder: dir })\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 Migrating database: ${e}`))\n  }\n}\n\nexport async function findScriptByHash(hash: string, db: DbConn) {\n  const dataRows = await db.select().from(scriptDataTable).where(eq(scriptDataTable.hash, hash))\n  if (dataRows.length === 0) {\n    return null\n  }\n  const scriptData = dataRows[0] as TestScriptData\n  const scriptRows = await db.select().from(scriptsTable).where(eq(scriptsTable.id, scriptData.scriptId))\n  if (scriptRows.length === 0) {\n    return null\n  }\n  const script = scriptRows[0] as TestScript\n  script.scriptData = scriptData\n  return script\n}\n\nexport async function findScriptDataByHash(hash: string, db: DbConn) {\n  const rows = await db.select().from(scriptDataTable).where(eq(scriptDataTable.hash, hash))\n  if (rows.length === 0) {\n    return null\n  }\n  return rows[0] as TestScriptData\n}\n\nexport async function findTestSpecByScriptDataId(scriptDataId: string, db: DbConn) {\n  const rows = await db.select().from(testSpecsTable).where(eq(testSpecsTable.scriptDataId, scriptDataId))\n  if (rows.length === 0) {\n    return null\n  }\n  const testSpec = rows[0] as TestSpec\n\n  const topGivens = await db\n    .select()\n    .from(clausesTable)\n    .where(and(eq(clausesTable.parentId, testSpec.id), eq(clausesTable.type, ClauseType.TopLevelGiven)))\n    .orderBy(clausesTable.line)\n  testSpec.givens = topGivens as Clause[]\n\n  const defs = await db\n    .select()\n    .from(definitionsTable)\n    .where(eq(definitionsTable.testSpecId, testSpec.id))\n    .orderBy(definitionsTable.line)\n  testSpec.definitions = defs as Definition[]\n\n  for (const d of testSpec.definitions) {\n    const givens = await db\n      .select()\n      .from(clausesTable)\n      .where(and(eq(clausesTable.parentId, d.id), eq(clausesTable.type, ClauseType.TestGiven)))\n      .orderBy(clausesTable.line)\n    d.givens = givens as Clause[]\n\n    const steps = await db\n      .select()\n      .from(clausesTable)\n      .where(and(eq(clausesTable.parentId, d.id), eq(clausesTable.type, ClauseType.Step)))\n      .orderBy(clausesTable.line)\n    d.steps = steps as Clause[]\n\n    const calls = await db.select().from(callsTable).where(eq(callsTable.testSpecDefinitionId, d.id))\n    d.calls = calls\n  }\n\n  return testSpec\n}\n","import { text, integer, sqliteTable, index } from \"drizzle-orm/sqlite-core\"\n\nexport const scriptsTable = sqliteTable(\"scripts\", {\n  id: text(\"id\").notNull().primaryKey(),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\"),\n  status: integer(\"status\").notNull(),\n  name: text(\"name\").notNull(),\n  uri: text(\"uri\").notNull(),\n  scriptType: text(\"script_type\").notNull(),\n})\n\nexport const scriptDataTable = sqliteTable(\n  \"script_data\",\n  {\n    id: text(\"id\").notNull().primaryKey(),\n    createdAt: text(\"created_at\").notNull(),\n    updatedAt: text(\"updated_at\"),\n    status: integer(\"status\").notNull(),\n    hash: text(\"hash\").notNull(),\n    scriptId: text(\"script_id\").notNull(),\n  },\n  (table) => {\n    return {\n      hashIdx: index(\"hash_idx\").on(table.hash),\n    }\n  },\n)\n\nexport const testSpecsTable = sqliteTable(\"test_specs\", {\n  id: text(\"id\").notNull().primaryKey(),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\"),\n  status: integer(\"status\").notNull(),\n  scriptDataId: text(\"script_data_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n})\n\nexport const definitionsTable = sqliteTable(\"definitions\", {\n  id: text(\"id\").notNull().primaryKey(),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\"),\n  status: integer(\"status\").notNull(),\n  testSpecId: text(\"test_spec_id\").notNull(),\n  name: text(\"name\").notNull(),\n  line: integer(\"line\").notNull(),\n  type: integer(\"type\").notNull().default(0),\n})\n\nexport const clausesTable = sqliteTable(\"clauses\", {\n  id: text(\"id\").notNull().primaryKey(),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\"),\n  status: integer(\"status\").notNull(),\n  parentId: text(\"parent_id\").notNull(),\n  type: integer(\"type\").notNull(),\n  line: integer(\"line\").notNull(),\n  clause: text(\"clause\").notNull(),\n})\n\nexport const callsTable = sqliteTable(\"calls\", {\n  id: text(\"id\").notNull().primaryKey(),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\"),\n  status: integer(\"status\").notNull(),\n  testSpecDefinitionId: text(\"test_spec_definition_id\").notNull(),\n  testSpecClauseId: text(\"test_spec_clause_id\").notNull(),\n  externalId: text(\"external_id\"),\n  call: text(\"call\").notNull(),\n  params: text(\"params\").notNull(),\n})\n","import fs from \"fs/promises\"\nimport chalk from \"chalk\"\nimport { eq, inArray } from \"drizzle-orm\"\nimport { createHash } from \"node:crypto\"\nimport axios from \"axios\"\nimport { RuntimeConfig } from \"../config\"\nimport { closeDatabase, DbConn, getDatabase, findScriptByHash } from \"../lib/db\"\nimport { TestScript, Status } from \"../lib/types\"\nimport {\n  callsTable,\n  clausesTable,\n  definitionsTable,\n  scriptDataTable,\n  scriptsTable,\n  testSpecsTable,\n} from \"../lib/schema\"\nimport { getTargetFiles } from \"../lib/utils\"\n\nexport async function Cache(cfg: RuntimeConfig) {\n  try {\n    const testFiles = await getTargetFiles(cfg)\n    const db = getDatabase(cfg.cacheDir)\n    await cacheFiles(testFiles, cfg, db)\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 Caching files failed: ${e}`))\n  } finally {\n    closeDatabase()\n  }\n}\n\nexport async function cacheFiles(files: string[], cfg: RuntimeConfig, db: DbConn) {\n  const scripts: TestScript[] = []\n  for (const f of files) {\n    scripts.push(await cacheFile(f, cfg, db))\n  }\n\n  for (const script of scripts) {\n    if (script.scriptData.status === Status.Active) {\n      continue\n    }\n    console.log(chalk.blueBright(`Waiting for processing of ${script.name} to complete`))\n    await pollForActiveScript(script.id, script.scriptData.id, cfg, db)\n  }\n}\n\nasync function cacheFile(file: string, cfg: RuntimeConfig, db: DbConn) {\n  console.log(chalk.blueBright(`Processing ${file}`))\n  if (cfg.force) {\n    console.log(chalk.blueBright(`Forcing re-cache of ${file}`))\n  }\n\n  try {\n    const scriptText = await fs.readFile(file, { encoding: \"utf-8\" })\n    const req = {\n      uri: `file://${file}`,\n      data: scriptText,\n      scriptType: \"markdown\",\n      forceParse: cfg.force,\n    }\n\n    const hash = createHash(\"sha256\").update(scriptText).digest(\"base64\")\n    const existingScript = await findScriptByHash(hash, db)\n    if (!cfg.force) {\n      if (existingScript && existingScript.status === Status.Active) {\n        console.log(chalk.greenBright(`👍 ${file} already cached`))\n        return existingScript\n      }\n    }\n\n    const { data: script } = await axios.post<TestScript>(`${cfg.apiBaseURL}/projects/${cfg.projectId}/scripts`, req, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Bearer ${cfg.apiKey}`,\n      },\n    })\n    await saveScript(script, db)\n\n    console.log(chalk.greenBright(`👍 ${file} cached`))\n    return script\n  } catch (e) {\n    if (axios.isAxiosError(e)) {\n      if (e.response && e.response.status === 402) {\n        throw \"You have insufficient credits, please top up your account\"\n      }\n    }\n    console.log(chalk.redBright(`🤕 Processing ${file}: ${e}`))\n    throw e\n  }\n}\n\nasync function pollForActiveScript(scriptId: string, scriptDataId: string, cfg: RuntimeConfig, db: DbConn) {\n  return new Promise<TestScript>((resolve, reject) => {\n    const start = new Date()\n    const timer = setInterval(async () => {\n      try {\n        console.log(chalk.blueBright(`Polling for script ${scriptId}`))\n        const { status, data: script } = await axios.get<TestScript>(\n          `${cfg.apiBaseURL}/projects/${cfg.projectId}/scripts/${scriptId}/data/${scriptDataId}`,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n              Authorization: `Bearer ${cfg.apiKey}`,\n            },\n          },\n        )\n        if (status !== 200) {\n          throw `Server returned ${status}`\n        }\n        await saveScript(script, db)\n\n        if (script.scriptData.status === Status.Active) {\n          console.log(chalk.greenBright(`👍 ${script.id} cached`))\n          clearTimeout(timer)\n          resolve(script)\n          return\n        }\n\n        const now = new Date()\n        if (now.getTime() - start.getTime() > 60000) {\n          clearTimeout(timer)\n          reject(`Timeout waiting for completion of ${scriptId}`)\n        }\n      } catch (e) {\n        console.log(chalk.redBright(`🤕 Polling for active script ${scriptId}: ${e}`))\n        throw e\n      }\n    }, 5000)\n  })\n}\n\nasync function saveScript(script: TestScript, db: DbConn) {\n  await db.transaction(async (tx) => {\n    const existingScript = await tx.select().from(scriptsTable).where(eq(scriptsTable.id, script.id))\n    if (existingScript.length === 0) {\n      await tx.insert(scriptsTable).values({\n        id: script.id,\n        createdAt: script.createdAt,\n        updatedAt: script.updatedAt,\n        status: script.status,\n        name: script.name,\n        uri: script.uri,\n        scriptType: script.scriptType,\n      })\n    } else {\n      await tx\n        .update(scriptsTable)\n        .set({\n          updatedAt: script.updatedAt,\n          status: script.status,\n          name: script.name,\n        })\n        .where(eq(scriptsTable.id, script.id))\n    }\n\n    const existingData = await tx.select().from(scriptDataTable).where(eq(scriptDataTable.id, script.scriptData.id))\n    if (existingData.length === 0) {\n      await tx.insert(scriptDataTable).values({\n        id: script.scriptData.id,\n        createdAt: script.scriptData.createdAt,\n        updatedAt: script.scriptData.updatedAt,\n        status: script.scriptData.status,\n        hash: script.scriptData.hash,\n        scriptId: script.id,\n      })\n    } else {\n      await tx\n        .update(scriptDataTable)\n        .set({\n          updatedAt: script.scriptData.updatedAt,\n          status: script.scriptData.status,\n        })\n        .where(eq(scriptDataTable.id, script.scriptData.id))\n    }\n\n    if (script.scriptData.spec) {\n      const existingSpec = await tx\n        .select()\n        .from(testSpecsTable)\n        .where(eq(testSpecsTable.id, script.scriptData.spec.id))\n      if (existingSpec.length === 0) {\n        await tx.insert(testSpecsTable).values({\n          id: script.scriptData.spec.id,\n          createdAt: script.scriptData.spec.createdAt,\n          updatedAt: script.scriptData.spec.updatedAt,\n          status: script.scriptData.spec.status,\n          scriptDataId: script.scriptData.id,\n          name: script.scriptData.spec.name,\n          description: script.scriptData.spec.description,\n        })\n      } else {\n        await tx\n          .update(testSpecsTable)\n          .set({\n            updatedAt: script.scriptData.spec.updatedAt,\n            status: script.scriptData.spec.status,\n            name: script.scriptData.spec.name,\n            description: script.scriptData.spec.description,\n          })\n          .where(eq(testSpecsTable.id, script.scriptData.spec.id))\n      }\n\n      const q1 = tx\n        .select({ data: definitionsTable.id })\n        .from(definitionsTable)\n        .where(eq(definitionsTable.testSpecId, script.scriptData.spec.id))\n      await tx.delete(clausesTable).where(inArray(clausesTable.parentId, q1))\n      await tx.delete(callsTable).where(inArray(callsTable.testSpecDefinitionId, q1))\n\n      await tx.delete(definitionsTable).where(eq(definitionsTable.testSpecId, script.scriptData.spec.id))\n      await tx.delete(clausesTable).where(eq(clausesTable.parentId, script.scriptData.spec.id))\n\n      if (script.scriptData.spec.givens) {\n        for (const g of script.scriptData.spec.givens) {\n          await tx.insert(clausesTable).values({\n            id: g.id,\n            createdAt: g.createdAt,\n            updatedAt: g.updatedAt,\n            status: g.status,\n            parentId: script.scriptData.spec.id,\n            type: g.type,\n            line: g.line,\n            clause: g.clause,\n          })\n        }\n      }\n\n      for (const d of script.scriptData.spec.definitions) {\n        await tx.insert(definitionsTable).values({\n          id: d.id,\n          createdAt: d.createdAt,\n          updatedAt: d.updatedAt,\n          status: d.status,\n          testSpecId: d.testSpecId,\n          name: d.name,\n          line: d.line,\n          type: d.type,\n        })\n\n        if (d.givens) {\n          for (const g of d.givens) {\n            await tx.insert(clausesTable).values({\n              id: g.id,\n              createdAt: g.createdAt,\n              updatedAt: g.updatedAt,\n              status: g.status,\n              parentId: d.id,\n              type: g.type,\n              line: g.line,\n              clause: g.clause,\n            })\n          }\n        }\n\n        if (d.steps) {\n          for (const s of d.steps) {\n            await tx.insert(clausesTable).values({\n              id: s.id,\n              createdAt: s.createdAt,\n              updatedAt: s.updatedAt,\n              status: s.status,\n              parentId: d.id,\n              type: s.type,\n              line: s.line,\n              clause: s.clause,\n            })\n          }\n        }\n\n        if (d.calls) {\n          for (const c of d.calls) {\n            await tx.insert(callsTable).values({\n              id: c.id,\n              createdAt: c.createdAt,\n              updatedAt: c.updatedAt,\n              status: c.status,\n              testSpecDefinitionId: c.testSpecDefinitionId,\n              testSpecClauseId: c.testSpecClauseId,\n              externalId: c.externalId,\n              call: c.call,\n              params: c.params,\n            })\n          }\n        }\n      }\n    }\n  })\n}\n","import fs from \"fs/promises\"\nimport path from \"path\"\nimport chalk from \"chalk\"\n\nimport { RuntimeConfig, fileExists } from \"../config\"\n\nexport async function getTargetFiles(cfg: RuntimeConfig) {\n  let testFiles: string[] = []\n  if (cfg.file) {\n    const p = path.isAbsolute(cfg.file) ? cfg.file : path.resolve(cfg.testsDir, cfg.file)\n    const exists = await fileExists(p)\n    if (exists) {\n      testFiles.push(p)\n      return testFiles\n    }\n    throw `File ${cfg.file} not found`\n  } else {\n    console.log(chalk.blueBright(`⏳ Looking for test files in ${cfg.testsDir}`))\n    testFiles = await walkDirs(cfg.testsDir)\n    console.log(chalk.blueBright(`👍 Found ${testFiles.length} test files`))\n  }\n\n  if (testFiles.length === 0) {\n    throw \"No test files found\"\n  }\n\n  return testFiles\n}\n\nasync function walkDirs(source: string) {\n  const dirs = await fs.readdir(source)\n\n  const files: string[] = []\n  for (const d of dirs) {\n    const p = path.join(source, d)\n    const stat = await fs.stat(p)\n    if (stat.isDirectory()) {\n      const children = await walkDirs(p)\n      files.push(...children)\n    } else if (p.toLocaleLowerCase().endsWith(\".md\")) {\n      files.push(p)\n    }\n  }\n\n  return files\n}\n","import fs from \"fs/promises\"\nimport path from \"path\"\nimport chalk from \"chalk\"\nimport untildify from \"untildify\"\nimport { z } from \"zod\"\nimport { Definition } from \"./lib/types\"\n\nexport const BrowserTypeEnum = z.enum([\"chrome\", \"MicrosoftEdge\", \"firefox\", \"internet explorer\", \"safari\"])\nexport type BrowserTypeEnum = z.infer<typeof BrowserTypeEnum>\n\nconst ConfigFileSchema = z.object({\n  projectId: z.string().optional(),\n  apiKey: z.string().optional(),\n  baseDir: z.string().optional().default(\"testabulous\"),\n  uiPort: z.number().optional().default(4000),\n  apiBaseURL: z.string().url().optional().default(\"https://testabulous.com/api/v1\"),\n  screenshots: z.boolean().optional().default(false),\n  uploadResults: z.boolean().optional().default(false),\n  browser: z\n    .object({\n      browser: BrowserTypeEnum.optional().default(\"chrome\"),\n      headless: z.boolean().optional().default(false),\n      windowSize: z\n        .object({\n          width: z.number().optional().default(1920),\n          height: z.number().optional().default(1080),\n        })\n        .optional(),\n    })\n    .optional()\n    .default({\n      browser: \"chrome\",\n      headless: true,\n      windowSize: { width: 1920, height: 1080 },\n    }),\n  envFile: z.string().optional(),\n})\n\ntype ConfigFile = z.infer<typeof ConfigFileSchema>\n\nexport interface WindowSize {\n  width: number\n  height: number\n}\n\nexport interface BrowserConfig {\n  browser?: BrowserTypeEnum\n  headless?: boolean\n  windowSize?: WindowSize\n}\n\nexport interface RuntimeConfig extends ConfigFile {\n  projectId: string\n  taskId?: string\n  testScriptDataId?: string\n  apiKey: string\n  rootDir: string\n  testsDir: string\n  cacheDir: string\n  logsDir: string\n  scriptsDir: string\n  screenshotsDir: string\n  screenshots: boolean\n  uploadResults: boolean\n  file?: string // Specific test file to cache or execute, from command line\n  test?: string\n  force: boolean\n  debug: boolean\n  procedures: Definition[]\n}\n\nconst defaultConfig = {\n  rootDir: process.cwd(),\n  baseDir: \"testabulous\",\n  testsDir: \"./tests\",\n  cacheDir: \"./cache\",\n  logsDir: \"./logs\",\n  scriptsDir: \"./scripts\",\n  screenshotsDir: \"./screenshots\",\n  force: false,\n  debug: false,\n  procedures: [],\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport async function BuildConfig(opts: any, localOpts: any) {\n  let c = { ...defaultConfig, ...ConfigFileSchema.parse({}), ...localOpts } as RuntimeConfig\n\n  if (opts.rootDir && opts.configFile) {\n    throw new Error(\"Cannot specify both --root-dir and --config-file\")\n  }\n\n  let rootDir = c.rootDir\n  let configFile = \"testabulous.config.json\"\n  if (opts.rootDir) {\n    rootDir = untildify(opts.rootDir)\n    configFile = path.join(rootDir, \"testabulous.config.json\")\n  } else if (opts.configFile) {\n    rootDir = path.resolve(process.cwd(), path.dirname(untildify(opts.configFile)))\n    configFile = path.resolve(process.cwd(), untildify(opts.configFile))\n  }\n  c.rootDir = path.isAbsolute(rootDir) ? rootDir : path.resolve(process.cwd(), rootDir)\n\n  console.log(chalk.greenBright(`Using root directory ${c.rootDir}`))\n\n  const configFileExists = await fileExists(configFile)\n  if (configFileExists) {\n    try {\n      const data = await fs.readFile(configFile, { encoding: \"utf-8\" })\n      const localConfig = ConfigFileSchema.parse(JSON.parse(data))\n      c = { ...c, ...localConfig }\n      console.log(chalk.greenBright(`🚀 Loaded config file ${configFile}`))\n    } catch (e) {\n      throw `Config file ${opts.configFile} is not parsable: ${e}`\n    }\n  } else {\n    console.log(chalk.yellow(`🤕 Configuration file not found, using defaults`))\n  }\n\n  if (opts.envFile) {\n    c.envFile = opts.envFile\n  }\n\n  if (c.envFile) {\n    c.envFile = path.resolve(c.rootDir, c.envFile)\n    const envFileExists = await fileExists(c.envFile)\n    if (envFileExists) {\n      await loadEnvFile(c.envFile)\n      console.log(chalk.greenBright(`🚀 Loaded environment file ${c.envFile}`))\n    } else {\n      throw new Error(`🤕 Environment file ${c.envFile} not found`)\n    }\n  }\n\n  c.apiBaseURL = process.env.TESTABULOUS_API_BASE_URL || c.apiBaseURL\n  c.projectId = process.env.TESTABULOUS_PROJECT_ID || c.projectId\n  c.taskId = process.env.TESTABULOUS_TASK_ID\n  c.apiKey = process.env.TESTABULOUS_API_KEY || c.apiKey\n  c.testScriptDataId = process.env.TESTABULOUS_TEST_SCRIPT_DATA_ID\n  if (process.env.TESTABULOUS_UPLOAD_RESULTS) {\n    c.uploadResults = (process.env.TESTABULOUS_UPLOAD_RESULTS || \"false\").toLowerCase() === \"true\"\n  }\n\n  if (opts.projectId) {\n    c.projectId = opts.projectId\n  }\n\n  if (opts.apiKey) {\n    c.apiKey = opts.apiKey\n  }\n\n  if (opts.port) {\n    c.uiPort = opts.port\n  }\n\n  if (c.projectId === \"\") {\n    throw \"A Project ID is required\"\n  }\n  if (c.apiKey === \"\") {\n    throw \"An API key is required\"\n  }\n\n  c.testsDir = path.resolve(c.rootDir, c.baseDir, c.testsDir)\n  c.cacheDir = path.resolve(c.rootDir, c.baseDir, c.cacheDir)\n  c.logsDir = path.resolve(c.rootDir, c.baseDir, c.logsDir)\n  c.scriptsDir = path.resolve(c.rootDir, c.baseDir, c.scriptsDir)\n  c.screenshotsDir = path.resolve(c.rootDir, c.baseDir, c.screenshotsDir)\n\n  await fs.mkdir(c.rootDir, { recursive: true })\n  await fs.mkdir(c.testsDir, { recursive: true })\n  await fs.mkdir(c.cacheDir, { recursive: true })\n  await fs.mkdir(c.logsDir, { recursive: true })\n  await fs.mkdir(c.scriptsDir, { recursive: true })\n  await fs.mkdir(c.screenshotsDir, { recursive: true })\n\n  return c\n}\n\nasync function loadEnvFile(file: string) {\n  try {\n    const data = await fs.readFile(file, { encoding: \"utf-8\" })\n    data.split(\"\\n\").forEach((line) => {\n      line = line.trim()\n      if (line.length === 0) return\n      if (line.startsWith(\"#\")) return\n      if (line.startsWith(\"//\")) return\n      const ix = line.indexOf(\"#\")\n      if (ix > -1) {\n        line = line.substring(0, ix).trim()\n      }\n      const [key, value] = line.split(\"=\")\n      if (key && value) {\n        process.env[key] = value\n      } else {\n        throw new Error(`🤕 Could not parse environment file ${file}: malformed (${line})`)\n      }\n    })\n  } catch (e) {\n    throw new Error(`🤕 Could not parse environment file ${file}`)\n  }\n}\n\nexport async function fileExists(file: string) {\n  return fs\n    .stat(file)\n    .then(() => true)\n    .catch(() => false)\n}\n\nexport async function ensureDir(path: string) {\n  const exists = await fileExists(path)\n  if (!exists) {\n    await fs.mkdir(path, { recursive: true })\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { setInterval } from \"timers/promises\"\nimport path from \"path\"\nimport chalk from \"chalk\"\nimport { ExternalScript, TestContext, TestContextArguments, TestRunnerCall, TestStepRun } from \"./types\"\nimport { checkForClass, dereferenceArgument, executeWithTimeout, findElement, outcomeEnd, outcomeStart } from \"./utils\"\nimport { fileExists } from \"../config\"\nimport { runTest } from \".\"\n\nconst testRunnerCalls: Map<string, TestRunnerCall> = new Map()\n\nexport function registerTestRunnerCall(name: string, fn: TestRunnerCall) {\n  if (testRunnerCalls.has(name)) {\n    throw new Error(`test runner call already registered: ${name}`)\n  }\n  testRunnerCalls.set(name, fn)\n}\n\nexport function getTestRunnerCall(name: string) {\n  if (!testRunnerCalls.has(name)) {\n    throw new Error(`test runner call not found: ${name}`)\n  }\n  return testRunnerCalls.get(name)!\n}\n\nconst validPageProperties = new Set<string>()\nvalidPageProperties.add(\"title\")\n\ntestRunnerCalls.set(\"navigate_to_page\", async (ctx: TestContext, args: TestContextArguments) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n  if (!args.url) {\n    throw new Error(`missing argument: url`)\n  }\n\n  try {\n    const currentUrl = ctx.browser.getCurrentUrl()\n    if (currentUrl === args.url) {\n      await ctx.browser.navigate().refresh()\n    } else {\n      await ctx.browser.get(args.url)\n    }\n\n    for await (const start of setInterval(1000, new Date().valueOf())) {\n      const elapsed = new Date().valueOf() - start\n      if (elapsed > ctx.timeout) {\n        throw new Error(\"time out waiting for navigation\")\n      }\n      const state = await ctx.browser.executeScript(`return document.readyState`)\n      if (state === \"complete\" || state === \"interactive\") {\n        break\n      }\n    }\n\n    await ctx.browser.executeScript(`window.TESTABULOUS_testRunId = \"${ctx.testRunId}\"`)\n\n    outcomeEnd(res, \"pass\")\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n\n  return res\n})\n\ntestRunnerCalls.set(\"check_for_page_to_have_property\", async (ctx: TestContext, args: TestContextArguments) => {\n  if (!args.property) {\n    throw new Error(`missing argument: property`)\n  }\n  if (!args.value) {\n    throw new Error(`missing argument: value`)\n  }\n  const property = args.property.toString().toLowerCase()\n  if (!validPageProperties.has(property)) {\n    throw new Error(`unsupported identifier: ${property}`)\n  }\n\n  const res = await executeWithTimeout(async () => {\n    const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n    try {\n      const state = await ctx.browser.executeScript(`return document.readyState`)\n      if (state !== \"complete\") {\n        return undefined\n      }\n\n      const value = await ctx.browser.executeScript(`return document.${property}`)\n      if (value == args.value) {\n        outcomeEnd(res, \"pass\")\n      } else {\n        outcomeEnd(res, \"fail\", `found='${value}', expected='${args.value}'`)\n      }\n\n      res.endDate = new Date()\n      res.duration = res.endDate.valueOf() - res.startDate.valueOf()\n\n      return res\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      res.result = \"error\"\n      res.message = e!.toString()\n    }\n  }, ctx.timeout)\n\n  return res\n})\n\ntestRunnerCalls.set(\"click_on_element\", async (ctx: TestContext, args: TestContextArguments) => {\n  if (!args.identifier) {\n    throw new Error(`missing argument: identifier`)\n  }\n  if (!args.identifierType) {\n    throw new Error(`missing argument: identifierType`)\n  }\n\n  const res = await executeWithTimeout(async () => {\n    const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n    try {\n      const el = await findElement(ctx, args.identifierType, args.identifier, ctx.timeout)\n      if (!el) {\n        outcomeEnd(res, \"error\", \"element not found\")\n        return res\n      }\n\n      await el.click()\n      outcomeEnd(res, \"pass\")\n\n      return res\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      outcomeEnd(res, \"error\", e!.toString())\n    }\n  }, ctx.timeout)\n\n  return res\n})\n\ntestRunnerCalls.set(\"enter_text_in_element\", async (ctx: TestContext, args: TestContextArguments) => {\n  if (!args.identifier) {\n    throw new Error(`missing argument: identifier`)\n  }\n  if (!args.identifierType) {\n    throw new Error(`missing argument: identifierType`)\n  }\n\n  const res = await executeWithTimeout(async () => {\n    const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n    try {\n      const el = await findElement(ctx, args.identifierType, args.identifier, ctx.timeout)\n      if (!el) {\n        return\n      }\n\n      await el.sendKeys(dereferenceArgument(ctx, args.data))\n      outcomeEnd(res, \"pass\")\n\n      return res\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      outcomeEnd(res, \"error\", e!.toString())\n    }\n  }, ctx.timeout)\n\n  return res\n})\n\nasync function checkForState(ctx: TestContext, args: TestContextArguments, expected: boolean) {\n  if (!args.identifier) {\n    throw new Error(`missing argument: identifier`)\n  }\n  if (!args.identifierType) {\n    throw new Error(`missing argument: identifierType`)\n  }\n  if (!args.state) {\n    throw new Error(`missing argument: state`)\n  }\n  if (!args.stateType) {\n    throw new Error(`missing argument: stateType`)\n  }\n\n  const res = await executeWithTimeout(async () => {\n    const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n    try {\n      const el = await findElement(ctx, args.identifierType, args.identifier, ctx.timeout)\n      if (!el) {\n        return\n      }\n\n      let hasState = false\n      switch (args.stateType) {\n        case \"class\":\n          hasState = await checkForClass(el, args.state)\n          break\n        default:\n          throw new Error(\"unknown state type\")\n      }\n\n      if (hasState === expected) {\n        outcomeEnd(res, \"pass\")\n      } else {\n        outcomeEnd(res, \"fail\", `unexpected state: found='${hasState}', expected='${expected}'`)\n      }\n\n      return res\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      outcomeEnd(res, \"error\", e!.toString())\n    }\n  }, ctx.timeout)\n\n  return res\n}\n\ntestRunnerCalls.set(\"element_has_property_or_state\", async (ctx: TestContext, args: TestContextArguments) => {\n  return checkForState(ctx, args, true)\n})\n\ntestRunnerCalls.set(\"element_does_not_have_property_or_state\", async (ctx: TestContext, args: TestContextArguments) => {\n  return checkForState(ctx, args, false)\n})\n\ntestRunnerCalls.set(\"element_has_text\", async (ctx: TestContext, args: TestContextArguments) => {\n  if (!args.identifier) {\n    throw new Error(`missing argument: identifier`)\n  }\n  if (!args.identifierType) {\n    throw new Error(`missing argument: identifierType`)\n  }\n  if (!args.text) {\n    throw new Error(`missing argument: text`)\n  }\n\n  const res = await executeWithTimeout(async () => {\n    const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n    try {\n      const el = await findElement(ctx, args.identifierType, args.identifier, ctx.timeout)\n      if (!el) {\n        return\n      }\n\n      const text = await el.getText()\n      if (text === args.text) {\n        outcomeEnd(res, \"pass\")\n      } else {\n        outcomeEnd(res, \"fail\", `invalid text: found='${text}', expected='${args.text}'`)\n      }\n\n      return res\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      outcomeEnd(res, \"error\", e!.toString())\n    }\n  }, ctx.timeout)\n\n  return res\n})\n\ntestRunnerCalls.set(\"wait_for_time_period\", async (ctx: TestContext, args: TestContextArguments) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n  try {\n    let time = parseInt(args.time)\n    switch (args.unit) {\n      case \"s\":\n      case \"second\":\n      case \"seconds\":\n        time = time * 1000\n        break\n      case \"m\":\n      case \"minute\":\n      case \"minutes\":\n        time = time * 1000 * 60\n        break\n      case \"h\":\n      case \"hour\":\n      case \"hours\":\n        time = time * 1000 * 60 * 60\n        break\n      default:\n        throw new Error(`unsupported time unit: ${args.unit}`)\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, time))\n    outcomeEnd(res, \"pass\")\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n\n  return res\n})\n\ntestRunnerCalls.set(\"store_value_in_variable\", async (ctx: TestContext, args: TestContextArguments) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n  if (!args.variableName) {\n    throw new Error(`missing argument: variableName`)\n  }\n\n  try {\n    ctx.metadata[args.variableName] = dereferenceArgument(ctx, args.value)\n    outcomeEnd(res, \"pass\")\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n  return res\n})\n\ntestRunnerCalls.set(\"check_url_path\", async (ctx: TestContext, args: TestContextArguments) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n  try {\n    const urlRaw = await ctx.browser.getCurrentUrl()\n    const url = new URL(urlRaw)\n    if (url.pathname === args.path) {\n      outcomeEnd(res, \"pass\")\n    } else {\n      outcomeEnd(res, \"fail\", `invalid url path: found='${url.pathname}', expected='${args.path}'`)\n    }\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n\n  return res\n})\n\ntestRunnerCalls.set(\"wait_for_element_to_have_value\", async (ctx: TestContext) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n  outcomeEnd(res, \"error\", \"not implemented\")\n  return res\n})\n\ntestRunnerCalls.set(\"load_value_from_environment_variable\", async (ctx: TestContext, args: TestContextArguments) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n  if (!args.variableName) {\n    throw new Error(`missing argument: variableName`)\n  }\n  if (!args.envVarName) {\n    throw new Error(`missing argument: envVariableName`)\n  }\n\n  try {\n    const envVarName = args.envVarName.startsWith(\"$\") ? args.envVarName.slice(1) : args.envVarName\n    const value = process.env[envVarName] || \"\"\n\n    ctx.metadata[args.variableName] = dereferenceArgument(ctx, value)\n    outcomeEnd(res, \"pass\")\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n  return res\n})\n\ntestRunnerCalls.set(\"execute_script\", async (ctx: TestContext, args: TestContextArguments) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n  if (!args.scriptName) {\n    throw new Error(`missing argument: variableName`)\n  }\n\n  const def = ctx.config.procedures.find((p) => p.name === args.scriptName)\n  if (def) {\n    const testResult = await runTest(def, ctx)\n    outcomeEnd(res, testResult.result, testResult.message)\n    return res\n  }\n\n  const scriptPath = path.join(ctx.config.scriptsDir, args.scriptName)\n  if (!fileExists(scriptPath)) {\n    throw new Error(`missing script: ${scriptPath}`)\n  }\n\n  try {\n    const { default: scriptModule } = (await import(scriptPath)) as { default: ExternalScript }\n    const state = await scriptModule(ctx)\n    outcomeEnd(res, state.result, state.message)\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n  return res\n})\n\ntestRunnerCalls.set(\"wait_for_navigation\", async (ctx: TestContext) => {\n  const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n  try {\n    for await (const start of setInterval(1000, new Date().valueOf())) {\n      const elapsed = new Date().valueOf() - start\n      if (elapsed > ctx.timeout) {\n        outcomeEnd(res, \"fail\", \"timed out waiting for navigation\")\n        return res\n      }\n\n      const readyState = await ctx.browser.executeScript(`return document.readyState`)\n      if (!(readyState === \"complete\" || readyState === \"interactive\")) {\n        continue\n      }\n\n      // if the page has just navigated, the test run id will be reset\n      // so we know we've navigated if the test run id is empty\n      const state = await ctx.browser.executeScript(`return window.TESTABULOUS_testRunId`)\n      if (!state) {\n        break\n      }\n    }\n\n    await ctx.browser.executeScript(`window.TESTABULOUS_testRunId = \"${ctx.testRunId}\"`)\n\n    outcomeEnd(res, \"pass\")\n  } catch (e) {\n    console.log(chalk.redBright(`🤕 ${e}`))\n    outcomeEnd(res, \"error\", e!.toString())\n  }\n  return res\n})\n\ntestRunnerCalls.set(\"check_if_element_is_empty\", async (ctx: TestContext, args: TestContextArguments) => {\n  if (!args.identifier) {\n    throw new Error(`missing argument: identifier`)\n  }\n  if (!args.identifierType) {\n    throw new Error(`missing argument: identifierType`)\n  }\n\n  const res = await executeWithTimeout(async () => {\n    const res: TestStepRun = { ...outcomeStart(ctx.currentStep!.clause), stepId: ctx.currentStep!.id }\n\n    try {\n      const el = await findElement(ctx, args.identifierType, args.identifier, ctx.timeout)\n      if (!el) {\n        return\n      }\n\n      const children = await el.findElements({ css: \"*\" })\n      if (children.length === 0) {\n        outcomeEnd(res, \"pass\")\n      } else {\n        outcomeEnd(res, \"fail\", `element not empty: found=${children.length} children`)\n      }\n\n      return res\n    } catch (e) {\n      console.log(chalk.redBright(`🤕 ${e}`))\n      outcomeEnd(res, \"error\", e!.toString())\n    }\n  }, ctx.timeout)\n\n  return res\n})\n","import { setInterval } from \"timers/promises\"\nimport { By, WebElement } from \"selenium-webdriver\"\nimport { error } from \"selenium-webdriver\"\nimport { createId } from \"@paralleldrive/cuid2\"\nimport { format } from \"date-fns\"\n\nimport { TestContext, TestOutcome, TestStepRun, TimerCallback, TestResult, TestRun } from \"./types\"\nimport { RuntimeConfig } from \"../config\"\nimport axios from \"axios\"\nimport chalk from \"chalk\"\n\nconst defaultAlphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\nconst includeAlphabet = new Map([\n  [\"l\", \"abcdefghijklmnopqrstuvwxyz\"],\n  [\"L\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"],\n  [\"n\", \"0123456789\"],\n  [\"s\", \"!@#$%^&*()_+\"],\n])\n\nfunction randomString(spec: string) {\n  let lenSpec = \"\"\n  let charSpec = \"\"\n  for (const s of spec) {\n    if (/\\d/.test(s)) {\n      lenSpec += s\n      continue\n    }\n    if (includeAlphabet.has(s)) {\n      charSpec += includeAlphabet.get(s)\n    }\n  }\n\n  let len = 8\n  if (lenSpec > \"\") {\n    len = parseInt(lenSpec)\n  }\n\n  let chars = charSpec\n  if (charSpec === \"\") {\n    chars = defaultAlphabet\n  }\n\n  let result = \"\"\n  for (let i = 0; i < len; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n\n  return result\n}\n\nconst functions = new Map()\nfunctions.set(\"_random\", randomString)\n\nexport function dereferenceArgument(ctx: TestContext, val: string) {\n  let result = val\n  const matches = val.match(/\\{\\{.+?\\}\\}/g)\n  if (matches) {\n    for (const m of matches) {\n      const key = m\n        .substring(2, m.length - 2)\n        .substring(0, m.length - 2)\n        .trim()\n      if (ctx.metadata[key]) {\n        result = result.replace(m, ctx.metadata[key])\n        continue\n      }\n      if (/^['\"“”].*['\"“”]$/.test(key)) {\n        result = key.substring(1, key.length - 1)\n        continue\n      }\n      if (/_\\w+\\(.*?\\)/.test(key)) {\n        const els = key.split(/[()]/).filter((el) => el.length > 0)\n        if (functions.has(els[0])) {\n          const fn = functions.get(els[0])\n          if (els.length > 1) {\n            result = result.replace(m, fn(els[1]))\n            continue\n          }\n          result = result.replace(m, fn())\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nexport async function executeWithTimeout(cb: TimerCallback, timeout: number) {\n  return new Promise<TestStepRun>((resolve, reject) => {\n    ;(async () => {\n      let lastResult: TestStepRun | null = null\n      for await (const start of setInterval(250, new Date().valueOf())) {\n        const elapsed = new Date().valueOf() - start\n        if (elapsed > timeout) {\n          if (lastResult) {\n            resolve(lastResult)\n            return\n          }\n          reject(new Error(\"time out executing step\"))\n          return\n        }\n        const res = await cb()\n        if (res) {\n          if (res.result === \"pass\") {\n            resolve(res)\n            return\n          }\n          lastResult = res\n        }\n      }\n    })()\n  })\n}\n\nexport async function findElement(ctx: TestContext, identifierType: string, identifier: string, timeout: number) {\n  return new Promise<WebElement>((resolve, reject) => {\n    ;(async () => {\n      for await (const start of setInterval(100, new Date().valueOf())) {\n        const elapsed = new Date().valueOf() - start\n        if (elapsed > timeout) {\n          reject(new Error(`time out search for element: ${identifierType}=${identifier}`))\n          break\n        }\n        let el: WebElement | null = null\n        let t = identifierType.toLowerCase()\n        if (/^aria[- _]/.test(t)) {\n          t = \"aria\"\n        }\n\n        try {\n          switch (t) {\n            case \"id\":\n              el = await ctx.browser.findElement(By.id(identifier))\n              break\n            case \"class\":\n              el = await ctx.browser.findElement(By.className(identifier))\n              break\n            case \"css selector\":\n            case \"css\":\n              el = await ctx.browser.findElement(By.css(identifier))\n              break\n            case \"field\":\n              el = await ctx.browser.findElement(By.name(identifier))\n              break\n            case \"label\":\n              el = await findByLabel(ctx, identifierType, identifier)\n              break\n            case \"name\":\n              el = await ctx.browser.findElement(By.css(`*[name='${identifier}']`))\n              break\n            case \"text\":\n              el = await ctx.browser.findElement(By.xpath(`//*[text()='${identifier}']`))\n              break\n            case \"button\":\n              el = await ctx.browser.findElement(By.xpath(`//button[text()='${identifier}']`))\n              break\n            case \"aria\":\n              el = await ctx.browser.findElement(\n                By.css(`*[${identifierType.toLowerCase().replaceAll(/[ _]/g, \"-\")}='${identifier}']`),\n              )\n              break\n            default:\n              throw new Error(`unknown identifier type: ${identifierType}`)\n          }\n        } catch (e) {\n          if (e instanceof error.NoSuchElementError || e instanceof error.StaleElementReferenceError) {\n            continue\n          }\n          reject(e)\n          return\n        }\n        if (!el) {\n          continue\n        }\n        resolve(el)\n      }\n    })()\n  })\n}\n\nexport async function findByLabel(ctx: TestContext, identifierType: string, identifier: string) {\n  const el = await ctx.browser.findElement(By.xpath(`//*[contains(text(),'${identifier}')]`))\n  if (!el) {\n    return null\n  }\n\n  const forAttr = await el.getAttribute(\"for\")\n  if (forAttr) {\n    return await ctx.browser.findElement(By.id(forAttr))\n  }\n\n  return el\n}\n\nexport async function checkForClass(el: WebElement, clazz: string) {\n  const classes = await el.getAttribute(\"class\")\n  if (!classes) {\n    return false\n  }\n  const list = classes.toString().split(\" \")\n  return list.indexOf(clazz) >= 0\n}\n\nexport function formatNumber(val: number) {\n  let result = val.toString()\n  while (result.length < 5) {\n    result = \" \" + result\n  }\n  return result\n}\n\nexport function outcomeStart(name?: string) {\n  const startDate = new Date()\n  return {\n    executionId: createId(),\n    name: name || `Test run: ${format(startDate, \"yyyy-MM-dd HH:mm:ss\")}`,\n    result: \"fail\" as TestResult,\n    startDate,\n    duration: 0,\n    passCount: 0,\n    failCount: 0,\n    skipCount: 0,\n    warnCount: 0,\n    errorCount: 0,\n  } as TestOutcome\n}\n\nexport function outcomeEnd<T extends TestOutcome>(outcome: T, result: TestResult, message?: string): T {\n  outcome.result = result\n  switch (result) {\n    case \"pass\":\n      outcome.passCount++\n      break\n    case \"fail\":\n      outcome.failCount++\n      break\n    case \"skip\":\n      outcome.skipCount++\n      break\n    case \"warn\":\n      outcome.warnCount++\n      break\n    case \"error\":\n      outcome.errorCount++\n      break\n  }\n  outcome.message = message\n  outcome.endDate = new Date()\n  outcome.duration = outcome.endDate.getTime() - outcome.startDate.getTime()\n\n  return outcome\n}\n\nexport function aggregateOutcome<T extends TestOutcome, U extends TestOutcome>(outcome: T, outcomes: U[]): T {\n  outcome.endDate = new Date()\n  outcome.duration = outcome.endDate.getTime() - outcome.startDate.getTime()\n\n  for (const o of outcomes) {\n    outcome.passCount += o.passCount\n    outcome.failCount += o.failCount\n    outcome.skipCount += o.skipCount\n    outcome.warnCount += o.warnCount\n    outcome.errorCount += o.errorCount\n  }\n\n  if (outcome.errorCount > 0) {\n    outcome.result = \"error\"\n  } else if (outcome.failCount > 0) {\n    outcome.result = \"fail\"\n  } else if (outcome.passCount == 0 && outcome.warnCount > 0) {\n    outcome.result = \"warn\"\n  } else if (outcome.passCount == 0 && outcome.skipCount > 0) {\n    outcome.result = \"skip\"\n  } else {\n    outcome.result = \"pass\"\n  }\n  return outcome\n}\n\nexport async function uploadTestResult(cfg: RuntimeConfig, testRun: TestRun) {\n  if (!cfg.uploadResults) {\n    return\n  }\n\n  const { status } = await axios.post<string>(`${cfg.apiBaseURL}/projects/${cfg.projectId}/results`, testRun, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `Bearer ${cfg.apiKey}`,\n    },\n  })\n\n  if (status !== 200) {\n    throw `Server returned ${status}`\n  }\n\n  console.log(chalk.yellow(`👍 Uploaded results to Testabulous`))\n}\n","import \"chromedriver\"\nimport { ThenableWebDriver, Builder, logging } from \"selenium-webdriver\"\nimport * as chrome from \"selenium-webdriver/chrome.js\"\nimport chalk from \"chalk\"\nimport { RuntimeConfig, BrowserTypeEnum } from \"../config\"\n\nlet browser: ThenableWebDriver | null = null\n\nexport async function createBrowser(cfg: RuntimeConfig) {\n  if (browser) {\n    return browser\n  }\n\n  console.log(chalk.greenBright(`⏳ Starting web driver`))\n\n  const browserType = cfg.browser?.browser ?? BrowserTypeEnum.Values.chrome\n  const size = {\n    width: cfg.browser?.windowSize?.width ?? 1920,\n    height: cfg.browser?.windowSize?.height ?? 1080,\n  }\n  const headless = cfg.browser?.headless ?? false\n  const disableGpu = cfg.browser?.headless ?? false\n\n  const loggingPrefs = new logging.Preferences()\n  loggingPrefs.setLevel(logging.Type.BROWSER, logging.Level.ALL)\n\n  let chromeOptions = new chrome.Options()\n  if (headless) {\n    chromeOptions = chromeOptions.addArguments(\"--headless=new\")\n  }\n  if (disableGpu) {\n    chromeOptions = chromeOptions.addArguments(\"--disable-gpu\")\n  }\n  chromeOptions = chromeOptions.addArguments(\"--no-sandbox\")\n  chromeOptions = chromeOptions.addArguments(\"--disable-dev-shm-usage\")\n\n  chromeOptions = chromeOptions.windowSize(size).setLoggingPrefs(loggingPrefs) as chrome.Options\n\n  console.log(chalk.blue(`Staring browser: ${browser}`))\n  console.log(chalk.blue(`Screen size: ${size.width}x${size.height}`))\n  console.log(chalk.blue(`Headless: ${headless}`))\n  browser = new Builder().forBrowser(browserType).setChromeOptions(chromeOptions).build()\n\n  return browser\n}\n\nexport async function closeBrowser() {\n  if (browser) {\n    await browser.quit()\n  }\n  browser = null\n}\n","import fs from \"fs\"\nimport path from \"path\"\nimport Handlebars from \"handlebars\"\nimport { TestOutcome, TestRun } from \"./types\"\n\nconst icons = {\n  pass: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\">\n    <path fill-rule=\"evenodd\" d=\"M12.416 3.376a.75.75 0 0 1 .208 1.04l-5 7.5a.75.75 0 0 1-1.154.114l-3-3a.75.75 0 0 1 1.06-1.06l2.353 2.353 4.493-6.74a.75.75 0 0 1 1.04-.207Z\" clip-rule=\"evenodd\" />\n  </svg>`,\n  fail: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\">\n    <path d=\"M5.28 4.22a.75.75 0 0 0-1.06 1.06L6.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L8 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L9.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L8 6.94 5.28 4.22Z\" />\n  </svg>`,\n  error: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\">\n    <path fill-rule=\"evenodd\" d=\"M6.701 2.25c.577-1 2.02-1 2.598 0l5.196 9a1.5 1.5 0 0 1-1.299 2.25H2.804a1.5 1.5 0 0 1-1.3-2.25l5.197-9ZM8 4a.75.75 0 0 1 .75.75v3a.75.75 0 1 1-1.5 0v-3A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" clip-rule=\"evenodd\" />\n  </svg>`,\n  warn: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\">\n    <path fill-rule=\"evenodd\" d=\"M6.701 2.25c.577-1 2.02-1 2.598 0l5.196 9a1.5 1.5 0 0 1-1.299 2.25H2.804a1.5 1.5 0 0 1-1.3-2.25l5.197-9ZM8 4a.75.75 0 0 1 .75.75v3a.75.75 0 1 1-1.5 0v-3A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" clip-rule=\"evenodd\" />\n  </svg>`,\n  skip: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\">\n    <path fill-rule=\"evenodd\" d=\"M3.5 9.75A2.75 2.75 0 0 1 6.25 7h5.19L9.22 9.22a.75.75 0 1 0 1.06 1.06l3.5-3.5a.75.75 0 0 0 0-1.06l-3.5-3.5a.75.75 0 1 0-1.06 1.06l2.22 2.22H6.25a4.25 4.25 0 0 0 0 8.5h1a.75.75 0 0 0 0-1.5h-1A2.75 2.75 0 0 1 3.5 9.75Z\" clip-rule=\"evenodd\" />\n  </svg>`,\n}\n\nHandlebars.registerHelper(\"isPassed\", function (value: TestOutcome) {\n  return value.result === \"pass\"\n})\n\nHandlebars.registerHelper(\"isFailed\", function (value: TestOutcome) {\n  return value.result === \"fail\" || value.result === \"error\" || value.result === \"warn\"\n})\n\nHandlebars.registerHelper(\"isOthered\", function (value: TestOutcome) {\n  return !(value.result === \"pass\" || value.result === \"fail\" || value.result === \"error\" || value.result === \"warn\")\n})\n\nHandlebars.registerHelper(\"renderName\", function (test: TestOutcome) {\n  const icon = icons[test.result]\n  let colour = \"text-blue-700\"\n  switch (test.result) {\n    case \"pass\":\n      colour = \"text-green-700\"\n      break\n    case \"fail\":\n      colour = \"text-red-700\"\n      break\n    case \"error\":\n      colour = \"text-red-700\"\n      break\n    case \"warn\":\n      colour = \"text-yellow-700\"\n      break\n  }\n  return `<div class=\"flex flex-row gap-2 ${colour} items-center\"><div>${icon}</div><div class=\"\">${test.name}</div></div>`\n})\n\nconst templateMarkup = fs.readFileSync(path.resolve(__dirname, \"../resources/testrun.hbs\"), \"utf8\")\nconst template = Handlebars.compile(templateMarkup)\n\nexport function renderTestResult(testRun: TestRun) {\n  return template({\n    res: testRun,\n    testCount: testRun.passCount + testRun.failCount + testRun.errorCount + testRun.warnCount + testRun.skipCount,\n  })\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { RuntimeConfig } from \"../config\"\n\nexport async function WebUI(cfg: RuntimeConfig) {\n  throw new Error(\"WebUI: not implemented (yet)\")\n}\n","import axios from \"axios\"\nimport inquirer from \"inquirer\"\nimport { promises as fs } from \"fs\"\n\nimport { RuntimeConfig } from \"../config\"\nimport chalk from \"chalk\"\n\nexport async function InitTestabulous(cfg: RuntimeConfig) {\n  const questions = [\n    {\n      type: \"input\",\n      name: \"projectId\",\n      message: \"Project ID (copied from dashboard)\",\n      default: cfg.projectId,\n    },\n    {\n      type: \"input\",\n      name: \"apiKey\",\n      message: \"Project API key (copied from dashboard)\",\n      default: cfg.apiKey,\n    },\n  ]\n\n  const answers = await inquirer.prompt(questions)\n  if (!answers.projectId || !answers.apiKey) {\n    throw new Error(\"Project ID and API key are required\")\n  }\n\n  cfg.projectId = answers.projectId\n  cfg.apiKey = answers.apiKey\n\n  try {\n    const { data } = await axios.post(`${cfg.apiBaseURL}/projects/${cfg.projectId}/ping`, undefined, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Bearer ${cfg.apiKey}`,\n      },\n    })\n\n    if (data !== \"pong\") {\n      throw new Error(\"Project ID or API key is invalid\")\n    }\n\n    const envFileContent = `TESTABULOUS_PROJECT_ID=${cfg.projectId}\\nTESTABULOUS_API_KEY=${cfg.apiKey}\\n`\n    await fs.writeFile(\".env.testabulous\", envFileContent, { encoding: \"utf-8\" })\n\n    const configFileContent = JSON.stringify({ envFile: \".env.testabulous\" }, null, 2)\n    await fs.writeFile(\"testabulous.config.json\", configFileContent, { encoding: \"utf-8\" })\n\n    const packageJson = await fs.readFile(\"package.json\", { encoding: \"utf-8\" })\n    const packageJsonObj = JSON.parse(packageJson)\n    if (!packageJsonObj.scripts) {\n      packageJsonObj.scripts = {}\n    }\n    if (!packageJsonObj.scripts[\"testabulous:cache\"]) {\n      packageJsonObj.scripts[\"test:cache\"] = \"testabulous cache --force\"\n    }\n    if (!packageJsonObj.scripts[\"testabulous:test\"]) {\n      packageJsonObj.scripts[\"test\"] = \"testabulous test\"\n    }\n    if (!packageJsonObj.scripts[\"testabulous:help\"]) {\n      packageJsonObj.scripts[\"test:help\"] = \"testabulous --help\"\n    }\n    await fs.writeFile(\"package.json\", JSON.stringify(packageJsonObj, null, 2), { encoding: \"utf-8\" })\n\n    console.log(\n      chalk.greenBright(\n        \"Your project ID and API key have been saved to .env.testabulous and this file referenced in testabulous.config.json. \" +\n          \"You should make sure that .env.testabulous is added to your .gitignore file. \" +\n          \"Alternatively, you can merge the TESTABULOUS_PROJECT_ID and TESTABULOUS_API_KEY \" +\n          \"environment variables into another .env file and update the config file accordingly, or set them elsewhere.\\n\" +\n          \"You can now start creating your test files in ./testabulous/tests and call 'npm run test' to run your tests. \" +\n          \"See https://docs.testabulous.com/category/getting-started for more information.\",\n      ),\n    )\n  } catch (e) {\n    console.log(e)\n    if (axios.isAxiosError(e)) {\n      if (e.response && (e.response.status === 404 || e.response.status === 401)) {\n        throw new Error(\"Project ID or API key is invalid\")\n      }\n    }\n    throw e\n  }\n\n  console.log(chalk.greenBright(\"👍 Project initialised\"))\n}\n"],"mappings":"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","names":["chalk","fs","chalk","createHash","path","path","fs","chalk","eq","fs","path","chalk","path","chalk","path","chalk","fs","chalk","fs","eq","setInterval","path","chalk","setInterval","axios","chalk","setInterval","chalk","res","text","path","chalk","chalk","logging","format","fs","path","axios","chalk","fs","format","browser","createHash","logging","axios","fs","chalk","chalk"]}